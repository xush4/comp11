// Comp11
// HW7
//Class board
#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include "board.h"
// Set defaulted value

using namespace std;
typedef int* IntArrayPtr;

Board::Board(int new_dimen)
{
  dimen=new_dimen;
  sum=0;
  next_step='0';
  numbers=new int[dimen*dimen];
  //num_zeros=dimen*dimen;
  //zero_position=new int[dimen*dimen];
}
Board::~Board() 
{
  delete[] numbers;
  //delete[] zero_position;
}

// Setters.
// void Board::set_dimen(int dimen_input)
//{
//  dimen=dimen_input;
//}

int Board::get_dimen()
{
  return dimen;
}

void Board::set_sum()
{
  sum=0;
  for (int i=0; i<dimen*dimen; i++)
    {
      sum+=numbers[i];
    }
}

int Board::get_sum()
{
  return sum;
}

void Board::set_matrix (int *new_numbers)
//void Board::set_matrix (vector<vector<int> >new_numbers)
{
  numbers=new_numbers;
}

IntArrayPtr Board::get_matrix()
{

  return numbers;
}

void Board::set_achar(char char_input)
{
  next_step=char_input;
}

char Board::get_achar()
{
  //cout<<next_step;  
  return next_step;
}
void Board::init_board()
{
  const int New_Dimen=get_dimen();
  for (int i=0;i<New_Dimen*New_Dimen;i++)
    {
      numbers[i]=0;
      //zero_position[i]=i;
    }
  numbers[New_Dimen*New_Dimen-2]=2;
  //for (int i=New_Dimen*New_Dimen-2; i<dimen*dimen;i++)
  //  zero_position[i]=zero_position[i+1];
  numbers[New_Dimen*(New_Dimen-1)-1]=2;
  //for (int i=New_Dimen*(New_Dimen-1)-1; i<dimen*dimen;i++)
  //  zero_position[i]=zero_position[i+1];
  //num_zeros-=2;
}

void Board::make_move()
{
  if (next_step=='w')
    go_up();
  if (next_step=='a')
    go_left();
  if (next_step=='s')
    go_down();
  if (next_step=='d')
    go_right();
  int add_number=2;
  int rand_number=rand()%10;
  if (rand_number==1)
    add_number=4;
  int zeros[dimen*dimen];
  int num_zero=0;
  for (int i=0; i<dimen*dimen;i++)
    {
      if (numbers[i]==0)
	{
	  zeros[num_zero]=i;
	  num_zero++;
	}
    }
  int place=rand()%(num_zero+1);
  numbers[zeros[place]]=add_number;
  set_sum();
}

void Board::go_up()
{
  //set matrix
  int matrix1[dimen][dimen];
  const int New_Dimen2=get_dimen();
  for (int i = 0;i < dimen;i++)
    for(int j = 0;j < dimen;j++)
      matrix1[i][j] = numbers[i*New_Dimen2+j];

  // put non-zero to top
  int row, col, new_row, new_col;
  int k=0;
  for (col=0;col<New_Dimen2;col++)
    {
      for (row=0;row<New_Dimen2;row++)
	{
	if (matrix1[row][col]!=0 & row!=k)
	  {
	    matrix1[k][col]=matrix1[row][col];
	    matrix1[row][col]=0;
	    k++;
	  }
	else if (matrix1[row][col]!=0 & row==k)
	  {
	    k++;
	  }
	}
      // combine 2 same numbers;
      for (new_row=1; new_row<=k; new_row++)
	{
	  if (matrix1[new_row][col]==matrix1[new_row-1][col])
	    {
	      matrix1[new_row-1][col]*=2;
	      for(int i=new_row; i<k;i++)
		matrix1[i][col]=matrix1[i+1][col];
	      new_row--;
	      k--;
	    }
	}
	  k=0;
    }

  // update
  for (int i = 0;i < dimen;i++)
    for(int j = 0;j < dimen;j++)
      numbers[i*New_Dimen2+j] = matrix1[i][j];
}

void Board::go_down()
{

}

void Board::go_left()
{
  //set matrix
  int matrix1[dimen][dimen];
  const int New_Dimen2=get_dimen();
  for (int i = 0;i < dimen;i++)
    for(int j = 0;j < dimen;j++)
      matrix1[i][j] = numbers[i*New_Dimen2+j];
  // put non-zero to left
  int row, col, new_row, new_col;
  int k=0;
  for (row=0;row<New_Dimen2;row++)
    {
      for (col=0;col<New_Dimen2;col++)
	{
	if (matrix1[row][col]!=0 & col!=k)
	  {
	    matrix1[row][k]=matrix1[row][col];
	    matrix1[row][col]=0;
	    k++;
	  }
	else if (matrix1[row][col]!=0 & col==k)
	  {
	    k++;
	  }
	}
      for (new_col=1; new_col<=k; new_col++)
	{
	  if (matrix1[row][new_col]==matrix1[row][new_col-1])
	    {
	      matrix1[row][new_col-1]*=2;
	      for(int i=new_col; i<k;i++)
		matrix1[row][i]=matrix1[row][i+1];
	      new_col--;
	      k--;
	    }
	}
	  k=0;
    }
  //update
  for (int i = 0;i < dimen;i++)
    for(int j = 0;j < dimen;j++)
      numbers[i*New_Dimen2+j] = matrix1[i][j];
}

void Board::go_right()
{

}

void Board::print_board()
{
  const int New_Dimen2=get_dimen();
  // IntArrayPtr new_numbers=get_matrix();
  for (int i=0;i<dimen;i++)
    {
      for (int j=0; j<dimen;j++)
	{
	  if(numbers[i*New_Dimen2+j]==0)
	    cout<<"x";
	  else
	    cout<< numbers[i*New_Dimen2+j];
	  if(j==dimen-1)
	    cout<<endl;
	  else
	    cout<<' ';
	}
    }
}


